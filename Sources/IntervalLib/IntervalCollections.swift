import Foundation

public class IntervalCollection<
    IntervalType: IntervalProtocol>: IntervalCollectionProtocol {
  public typealias Element = IntervalType

  private var _intervals: [IntervalType]

  public init<CompatibleCollection: IntervalCollectionProtocol>(
      _ intervals: CompatibleCollection)
      where CompatibleCollection.Element == Element {
    self._intervals = Array(intervals)
  }
}

extension IntervalCollection: RandomAccessCollection {
  public typealias Index = Int
  public typealias Iterator = Array<Element>.Iterator

  public var startIndex: Index {
    return _intervals.startIndex
  }
  public var endIndex: Index {
    return _intervals.endIndex
  }

  public subscript(index: Index) -> Element {
    return _intervals[index]
  }

  public func index(after i: Index) -> Index {
    return _intervals.index(after: i)
  }

  public func makeIterator() -> Iterator {
    return _intervals.makeIterator()
  }
}

public class IndexedIntervalCollection:
    IntervalCollection<IndexedIntervalCollection.IndexedInterval> {

  public override init<InputCollection: IntervalCollectionProtocol>(
      _ intervals: InputCollection) {
    let converted = intervals.enumerated().map {
        (index: Int, interval: IntervalProtocol) -> IndexedInterval in
      IndexedInterval(interval, index: index)
    }
    super.init(converted)
  }

  public class IndexedInterval: Interval {
    public let index: Int

    public init(_ interval: IntervalProtocol, index: Int) {
      self.index = index
      super.init(interval)
    }

    public func indexedPointAtPosition(_ position: k) -> IndexedPoint {
      return IndexedPoint(interval: self, position: position)
    }

    public func indexedPoint(offset: k) -> IndexedPoint {
      return IndexedPoint(
          interval: self, position: leftBoundary + offset)
    }

    public func intersection(_ i: Interval) -> Subinterval? {
      let left = leftBoundary > i.leftBoundary ? leftBoundary : i.leftBoundary
      let right =
          rightBoundary < i.rightBoundary ? rightBoundary : i.rightBoundary
      if left >= right {
        return nil
      }
      return Subinterval(
          leftBoundary: left, rightBoundary: right, containedIn: self)
    }

    public override var description: String {
      return "IndexedInterval(\(super.shortDescription), index: \(index))"
    }

    public var shortDescription: String {
      return "\(index):\(super.shortDescription)"
    }
  }
  // A subinterval contained in a specified IndexedInterval in this
  // collection.
  public class Subinterval: Interval {
    // The interval this one is contained in in the current IntervalDomain.
    public let containingInterval: IndexedInterval

    fileprivate init(
        leftBoundary: k, rightBoundary: k,
        containedIn containingInterval: IndexedInterval) {
      self.containingInterval = containingInterval
      super.init(leftBoundary: leftBoundary, rightBoundary: rightBoundary)
    }

    public override var description: String {
      return "Subinterval(leftBoundary: \(leftBoundary), " +
          "rightBoundary: \(rightBoundary), length: \(length), " + "containingInterval: \(containingInterval)"
    }

  }
  public class IndexedPoint {
    // The interval this point was generated by.
    public let interval: IndexedInterval
    public let position: k

    fileprivate init(
        interval: IndexedInterval, position: k) {
      self.interval = interval
      self.position = position
    }

    public var offset: k {
      return position - interval.leftBoundary
    }
  }
}

// A disjoint nonempty collection of intervals, sorted by position.
// Used as input / output domains for translation maps.
public class IntervalDomain: IndexedIntervalCollection {

  public init<InputCollection: IntervalCollectionProtocol>(
      fromSortedIntervals intervals: InputCollection) {
    super.init(intervals)
  }

  public convenience init(fromInterval interval: Interval) {
    self.init(fromSortedIntervals: [interval])
  }

  public convenience init(fromLengths lengths: [k], leftBoundary: k) {
    var pos = leftBoundary
    var intervals: [Interval] = []
    for length in lengths {
      let interval = Interval(leftBoundary: pos, length: length)
      intervals.append(interval)
      pos = interval.rightBoundary
    }
    self.init(fromSortedIntervals: intervals)
  }

  // Assorted helpers
  public var bounds: Interval {
    return Interval(
        leftBoundary: self.first!.leftBoundary,
        rightBoundary: self.last!.rightBoundary)
  }

  public func leftBoundaries() -> [k] {
    return self.map { $0.leftBoundary }
  }

  public func rightBoundaries() -> [k] {
    return self.map { $0.rightBoundary }
  }

  public func lengths() -> [k] {
    return self.map { $0.length }
  }

  public func totalLength() -> k {
    return lengths().reduce(k.zero(), +)
  }

  public func indexedPointAtPosition(_ position: k) -> IndexedPoint? {
    for interval in self {
      if interval.containsPosition(position) {
        return interval.indexedPointAtPosition(position)
      }
    }
    return nil
  }

  public func asSubrangeOf(
      _ refiningIntervals: IntervalDomain) -> Subrange? {
    var results: [Subinterval] = []
    var intervalIter = makeIterator()
    var refiningIntervalIter = refiningIntervals.makeIterator()
    var curInterval = intervalIter.next()
    var refiningInterval = refiningIntervalIter.next()
    while curInterval != nil && refiningInterval != nil {
      if curInterval!.rightBoundary <= refiningInterval!.leftBoundary {
        curInterval = intervalIter.next()
      } else {
        if let intersection = refiningInterval!.intersection(curInterval!) {
          results.append(intersection)
        }
        refiningInterval = refiningIntervalIter.next()
      }
    }
    if !results.isEmpty {
      return Subrange(sortedIntervals: results, containedIn: self)
    }
    return nil
  }

  public class CoveringMap: IntervalMapProtocol {
    public typealias FromType = IntervalDomain
    public typealias ToType = IntervalDomain
    public typealias IndexMapType = IndexMap<Int, Int>
    public typealias InverseType = CoveringMap

    public let fromIntervals: IntervalDomain
    public let toIntervals: IntervalDomain
    public let indexMap: IndexMap<Int, Int>

    fileprivate init(fromIntervals: IntervalDomain, toIntervals: IntervalDomain,
        indexMap: IndexMap<Int, Int>) {
      self.fromIntervals = fromIntervals
      self.toIntervals = toIntervals
      self.indexMap = indexMap
    }
  }

  public class Intersection: IntervalDomain {
    /// Invariant: coveringMaps[*].fromIntervals == self
    public var coveringMaps: [CoveringMap]

    fileprivate init(coveringMaps: [CoveringMap]) {
      self.coveringMaps = coveringMaps
      super.init(fromSortedIntervals: coveringMaps.first!.fromIntervals)
    }

    public func coveringMapInto(
        _ domain: IntervalDomain) -> CoveringMap? {
      return coveringMaps.first(where: { $0.toIntervals === domain })
    }
  }

  public func intersectionWith(_ domain: IntervalDomain) -> Intersection? {
    var selfIndex = startIndex
    var domainIndex = domain.startIndex
    var newIntervals: [Interval] = []
    var selfContainmentOrder: [Index: Index] = [:]
    var domainContainmentOrder: [Index: Index] = [:]

    // TODO: Add the forward maps for the containments in the two intersected
    // sets.
    while selfIndex != endIndex && domainIndex != domain.endIndex {
      let selfInterval = self[selfIndex]
      let domainInterval = domain[domainIndex]
      if selfInterval.rightBoundary <= domainInterval.leftBoundary {
        // selfInterval overlaps none of domainInterval, discard it
        selfIndex += 1
      } else if selfInterval.leftBoundary >= domainInterval.rightBoundary {
        domainIndex += 1
      } else {
        let leftBoundary = Swift.max(
            selfInterval.leftBoundary, domainInterval.leftBoundary)
        let rightBoundary = Swift.min(
            selfInterval.rightBoundary, domainInterval.rightBoundary)
        selfContainmentOrder[newIntervals.count] = selfIndex
        domainContainmentOrder[newIntervals.count] = domainIndex
        newIntervals.append(Interval(
            leftBoundary: leftBoundary, rightBoundary: rightBoundary))
        if rightBoundary == selfInterval.rightBoundary {
          selfIndex += 1
        }
        if rightBoundary == domainInterval.rightBoundary {
          domainIndex += 1
        }
      }
    }
    let intersection = IntervalDomain(fromSortedIntervals: newIntervals)
    if !newIntervals.isEmpty {
      let selfContainment = CoveringMap(
          fromIntervals: intersection, toIntervals: self,
          indexMap: IndexMap(forwardMap: selfContainmentOrder))
      let domainContainment = CoveringMap(
          fromIntervals: intersection, toIntervals: domain,
          indexMap: IndexMap(forwardMap: domainContainmentOrder))
      return Intersection(coveringMaps: [selfContainment, domainContainment])
    }
    return nil
  }

  public class Subrange: IntervalCollection<Subinterval> {
    public let containingRange: IntervalDomain

    fileprivate init(
        sortedIntervals: [Subinterval],
        containedIn containingRange: IntervalDomain) {
      self.containingRange = containingRange
      super.init(sortedIntervals)
    }

    // TODO: ...not sure if this is really needed?
    private class IntervalInclusion {
      var index: Int
      var length: Int
      init(index: Int, length: Int) {
        self.index = index
        self.length = length
      }
    }
  }
}
