import Foundation


public class IndexedIntervalCollection {
  private let _intervals: [IndexedInterval]

  public init(_ intervals: [Interval]) {
    self._intervals = intervals.enumerated().map {
      (intervalIndex: Int, interval: Interval) -> IndexedInterval in
        IndexedInterval(
            index: intervalIndex,
            leftBoundary: interval.leftBoundary,
            rightBoundary: interval.rightBoundary)
    }
  }

  public class IndexedInterval: Interval {
    public let index: Int

    public init(index: Int, leftBoundary: k, length: k) {
      self.index = index
      super.init(
          leftBoundary: leftBoundary, length: length)
    }

    public init(index: Int, leftBoundary: k, rightBoundary: k) {
      self.index = index
      super.init(
          leftBoundary: leftBoundary, rightBoundary: rightBoundary)
    }

    public func indexedPoint(position: k) -> IndexedPoint {
      return IndexedPoint(interval: self, position: position)
    }

    public func indexedPoint(offset: k) -> IndexedPoint {
      return IndexedPoint(
          interval: self, position: leftBoundary + offset)
    }

    public func intersection(_ i: Interval) -> Subinterval? {
      let left = leftBoundary > i.leftBoundary ? leftBoundary : i.leftBoundary
      let right =
          rightBoundary < i.rightBoundary ? rightBoundary : i.rightBoundary
      if left >= right {
        return nil
      }
      return Subinterval(
        leftBoundary: left,
        rightBoundary: right,
        containedIn: self)
    }
  }
  // A subinterval contained in a specified IndexedInterval in this
  // collection.
  public class Subinterval: Interval {
    // The interval this one is contained in in the current SortedIntervals.
    public let containingInterval: IndexedInterval

    fileprivate init(
        leftBoundary: k, rightBoundary: k,
        containedIn containingInterval: IndexedInterval) {
      self.containingInterval = containingInterval
      super.init(leftBoundary: leftBoundary, rightBoundary: rightBoundary)
    }
  }
  public class IndexedPoint {
    // The interval this point was generated by.
    public let interval: IndexedInterval
    public let position: k

    fileprivate init(
        interval: IndexedInterval, position: k) {
      self.interval = interval
      self.position = position
    }

    public var offset: k {
      return position - interval.leftBoundary
    }
  }
}

extension IndexedIntervalCollection: RandomAccessCollection {
  public typealias Element = IndexedInterval
  public typealias Index = Int
  public typealias Iterator = Array<Element>.Iterator

  public var startIndex: Index {
    return _intervals.startIndex
  }
  public var endIndex: Index {
    return _intervals.endIndex
  }

  public subscript(index: Index) -> IndexedInterval {
    return _intervals[index]
  }

  public func index(after i: Index) -> Index {
    return _intervals.index(after: i)
  }

  public func makeIterator() -> Iterator {
    return _intervals.makeIterator()
  }
}

// A disjoint nonempty collection of intervals, sorted by position.
// Used as input / output domains for translation maps.
public class SortedIntervals: IndexedIntervalCollection {

  public init(fromSortedList intervals: [Interval]) {
    super.init(intervals)
  }

  public convenience init(fromLengths lengths: [k]) {
    var pos = k.zero()
    var intervals: [Interval] = []
    for length in lengths {
      let interval = Interval(leftBoundary: pos, length: length)
      intervals.append(interval)
      pos = interval.rightBoundary
    }
    self.init(fromSortedList: intervals)
  }

  // Assorted helpers
  public var bounds: Interval {
    return Interval(
        leftBoundary: self.first!.leftBoundary,
        rightBoundary: self.last!.rightBoundary)
  }

  public func leftBoundaries() -> [k] {
    return self.map { $0.leftBoundary }
  }

  public func rightBoundaries() -> [k] {
    return self.map { $0.rightBoundary }
  }

  public func indexedPoint(position: k) -> IndexedPoint? {
    for interval in self {
      if interval.containsPosition(position) {
        return interval.indexedPoint(position: position)
      }
    }
    return nil
  }

  public func asRefinementOf(
      _ refiningIntervals: SortedIntervals) -> [Subinterval] {
    var results: [Subinterval] = []
    var intervalIter = makeIterator()
    var refiningIntervalIter = refiningIntervals.makeIterator()
    var curInterval = intervalIter.next()
    var refiningInterval = refiningIntervalIter.next()
    while curInterval != nil && refiningInterval != nil {
      if curInterval!.rightBoundary <= refiningInterval!.leftBoundary {
        curInterval = intervalIter.next()
      } else {
        if let intersection = refiningInterval!.intersection(curInterval!) {
          results.append(intersection)
        }
        refiningInterval = refiningIntervalIter.next()
      }
    }

    return []
  }
}
